#include<stdio.h>
#include<stdlib.h>
#include<string.h>
 
typedef int ElemType;
 

typedef struct Node
{
 ElemType data;
 struct Node *next;
}Node; 
 

void initList(Node **pNode)
{
 *pNode=NULL;
}

Node *create(Node *pHead)
{
 Node *p1;
 Node *p2;
 p1=(Node *)malloc(sizeof(Node));     
 memset(p1,0,sizeof(Node));      
 scanf("%d",&p1->data);
 p1->next=NULL;          
 while(p1->data>0)
 {           
  if(pHead==NULL)
   pHead=p1;
  else
  p2->next=p1;
  p2=p1;
  p1=(Node *)malloc(sizeof(Node));
  memset(p1,0,sizeof(Node));
  scanf("%d",&p1->data);
  p1->next=NULL;
 }
 return pHead;
}


void printList(Node *pHead)
{
 if(NULL==pHead)
  printf("链表为空\n");
 else
 {
  while(pHead!=NULL)
  {
   printf("%d ",pHead->data);
   pHead=pHead->next;
  }
 } 
 printf("\n");
} 


void insert_data(Node **pNode,int i)
{
 Node *temp;
 Node *target;
 Node *p;
 int item;
 int j ;
 printf("输入要插入的节点值:");
 scanf("%d",&item);
 target=*pNode;             
 for(j=1;j<i-1;++j) 
 target=target->next;
 temp=(Node *)malloc(sizeof(Node));   
 temp->data=item;       
 p=target->next;        
 target->next=temp;
 temp->next=p; 
} 


void delete_data(Node **pNode,int i)
{
 Node *target;
 Node *temp;
 int j;
 target=*pNode;
 for(j=1;j<i-1;++j)
 target=target->next;
 temp=target->next;
 target->next=temp->next;
	free(temp);
}


int main()
{
 int i;
 Node *pHead=NULL;
 printf("输入你想输入的数字\n");
 initList(&pHead);
 pHead=create(pHead);
 printList(pHead);
 printf("输入插入节点位置\n");
 scanf("%d",&i);
 insert_data(&pHead,i);
 printList(pHead);
 printf("输入删除节点位置\n");
 scanf("%d",&i);
 delete_data(&pHead,i);
 printList(pHead);
 return 0;
}